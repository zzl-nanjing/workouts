for(i in 1:(length(ltrs)-1)){
dis <- dis + distances[ltrs[i,i+1]]
}
return(dis)
}
#test
err <- c('E', 'D', ')')
get_dist(distances, err)
get_dist <- function(distances,ltrs){
for(i in ltrs){
if (!is.element(i,LETTERS))
stop("Unrecognized character")
}
dis <- 0
for(i in 1:(length(ltrs)-1)){
dis <- dis + distances[ltrs[i,i+1]]
}
return(dis)
}
#test
err <- c('E', 'D', 'A')
get_dist(distances, err)
get_dist <- function(distances,ltrs){
for(i in ltrs){
if (!is.element(i,LETTERS))
stop("Unrecognized character")
}
dis <- 0
for(i in 1:(length(ltrs)-1)){
dis <- dis + distances[ltrs[i],ltrs[i+1]]
}
return(dis)
}
#test
err <- c('E', 'D', 'A')
get_dist(distances, err)
get_dist <- function(distances,ltrs){
for(i in ltrs){
if (!is.element(i,LETTERS))
stop("Unrecognized character")
}
dis <- 0
for(i in 1:(length(ltrs)-1)){
dis <- dis + distances[ltrs[i],ltrs[i+1]]
}
return(dis)
}
#test
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
get_dist <- function(distances,ltrs){
for(i in ltrs){
if (!is.element(i,LETTERS))
stop("Unrecognized character")
}
dis <- 0
for(i in 1:(length(ltrs)-1)){
dis <- dis + distances[ltrs[i],ltrs[i+1]]
}
return(dis)
}
#test
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
get_dist(distances,cal)
get_dist(distances,stats)
get_dist(distances,oski)
get_dist(distances,zzz)
get_dist <- function(distances,ltrs){
for(i in ltrs){
if (!is.element(i,LETTERS))
stop("Unrecognized character")
}
dis <- 0
for(i in 1:(length(ltrs)-1)){
dis <- dis + distances[ltrs[i],ltrs[i+1]]
}
return(dis)
}
#test
cal <- c('C', 'A', 'L')
stats <- c('S', 'T', 'A', 'T', 'S')
oski <- c('O', 'S', 'K', 'I')
zzz <- rep('Z', 3)
lets <- LETTERS
first <- c("J","I","A","L","E")
last <- c("Z","H","A")
get_dist(distances,cal)
get_dist(distances,stats)
get_dist(distances,oski)
get_dist(distances,zzz)
get_dist(distances,lets)
get_dist(distances,first)
get_dist(distances,last)
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings
row.names(strings)
rownames(sstrings)
rownames(strings)
?list
for (i in strings){print(i)}
library(testthat)
Sys.setlocale(,locales="ENGLISH")
library(testthat)
Sys.setlocale(,locales="english")
library(testthat)
Sys.setlocale(,locales="English")
library(testthat)
Sys.setlocale(locales="English")
library(testthat)
#' @title Range
#' @description computes the range of a numeric vector (i.e. max - min)
#' @param x a numeric vector
#' @return the range value (max - min)
stat_range <- function(x) {
max(x) - min(x)
}
strings <- list(
cal = cal,
stats = stats,
oski = oski,
zzz = zzz,
lets = lets,
first = first,
last = last
)
strings
strings[1]
strings$cal
names(strings)
strings["cal"]
strings1 <- strings
string1.append(a=c("a"))
append
append(strings,a=c("a"))
strings1[7] <- list(a=c("abc"))
strings1
strings1[8] <- list(a=c("abc"))
strings1
strings1[a] <- list(a=c("abc"))
strings1
strings1 <- strings
strings1["a"] <- c("avs")
strings1
names <- names(strings)
strings_dists <- list()
for(i in names){
dis <- get_dist(distances,strings[i])
strings dists[i] <- dis
names <- names(strings)
strings_dists <- list()
for(i in names){
dis <- get_dist(distances,strings[i])
strings_dists[i] <- dis
}
strings["cal"]
get_dist(distances,strings["cal"])
get_dist(distances,data.frame(strings["cal"]))
data.frame(strings$cal)
strings["cal"]
aa <- strings["cal"]
aa
as.vector(aa)
unlist(aa)
as.vector(unlist(aa))
names <- names(strings)
strings_dists <- list()
for(i in names){
dis <- get_dist(distances,as.vector(unlist(strings[i]))
strings_dists[i] <- dis
names <- names(strings)
strings_dists <- list()
for(i in names){
dis <- get_dist(distances,as.vector(unlist(strings[i])))
strings_dists[i] <- dis
}
names <- names(strings)
strings_dists <- list()
for(i in names){
dis <- get_dist(distances,as.vector(unlist(strings[i])))
strings_dists[i] <- dis
}
strings_dists
# load the source code of the functions to be tested
source("functions.R")
# load the source code of the functions to be tested
source("functions.R")
# context with one test that groups expectations
context("Test for range value")
test_that("range works as expected", {
x <- c(1, 2, 3, 4, 5)
expect_equal(stat_range(x), 4)
expect_length(stat_range(x), 1)
expect_type(stat_range(x), 'double')
})
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
test_file("tests.R")
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
# Define UI for slider demo app ----
ui <- fluidPage(
# App title ----
titlePanel("Sliders"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Simple integer interval ----
sliderInput("integer", "Integer:",
min = 0, max = 1000,
value = 500),
# Input: Decimal interval with step value ----
sliderInput("decimal", "Decimal:",
min = 0, max = 1,
value = 0.5, step = 0.1),
# Input: Specification of range within an interval ----
sliderInput("range", "Range:",
min = 1, max = 1000,
value = c(200,500)),
# Input: Custom currency format for with basic animation ----
sliderInput("format", "Custom Format:",
min = 0, max = 10000,
value = 0, step = 2500,
pre = "$", sep = ",",
animate = TRUE),
# Input: Animation with custom interval (in ms) ----
# to control speed, plus looping
sliderInput("animation", "Looping Animation:",
min = 1, max = 2000,
value = 1, step = 10,
animate =
animationOptions(interval = 300, loop = TRUE))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values")
)
)
)
# Define server logic for slider examples ----
server <- function(input, output) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse = " "),
input$format,
input$animation)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table ----
output$values <- renderTable({
sliderValues()
})
}
# Create Shiny app ----
shinyApp(ui, server)
?selectInput
?numericInput
?selectInput
dis
strings
strings[app a] <- c("abs")
strings["app a"] <- c("abs")
strings$`app a`
Sys.setlocale("LC_ALL","English")
ui <- fluidPage(
titlePanel("investing scenarios"),
sidebarLayout(
sliderInput("integer","Initial Amount",
min = 0, max = 10000, step = 100,
pre = "$", sep = ",", value = 1000),
sliderInput("integer","Annual Contribution",
min = 0, max = 5000, step = 100,
pre = "$", sep = ",", value = 200),
sliderInput("decimal","Annual Growth Rate(in %)",
min = 0, max = 20, step = 0.1,
value = 2),
sliderInput("decimal","High Yield annual rate(in %)",
min = 0, max = 20, step = 0.1,
value = 2),
sliderInput("decimal","Fixed Income annual rate(in %)",
min = 0, max = 20, step = 0.1,
value = 5),
sliderInput("decimal","US Equality annual rate(in %)",
min = 0, max = 20, step = 0.1,
value = 10),
sliderInput("decimal","High Yield volatility(in %)",
min = 0, max = 20, step = 0.1,
value = 0.1),
sliderInput("decimal","Fixed Income volatility(in %)",
min = 0, max = 20, step = 0.1,
value = 4.5),
sliderInput("decimal","US Equality volatility(in %)",
min = 0, max = 20, step = 0.1,
value = 15),
sliderInput("integer","Year",
min = 0, max = 50, step = 1,
value = 20),
numericInput("integer","Random seed",value = 12345),
selectInput("Facet?",
choices = c("Yes","No"),selected = "Yes")),
mainPanel(tableOutput("values"))
)
server <- function(input,output){
sliderValues <- reactive({
data.frame(
Name = c("Initial Amount",
"Annual Contribution",
"Annual Growth Rate(in %)",
"High Yield annual rate(in %)",
"Fixed Income annual rate(in %)",
"US Equality annual rate(in %)",
"High Yield volatility(in %)",
"Fixed Income volatility(in %)",
"US Equality volatility(in %)",
"Year",
"Random seed",
"Facet?"),
Value = as.character(c(input$`Initial Amount`,
input$`Annual Contribution`,
input$`Annual Growth Rate(in %)`,
input$`High Yield annual rate(in %)`,
input$`Fixed Income annual rate(in %)`,
input$`US Equality annual rate(in %)`,
input$`High Yield volatility(in %`,
input$`Fixed Income volatility(in %)`,
input$`US Equality volatility(in %)`,
input$`Year`,
input$`Random seed`,
input$`Facet?`),
stringsAsFactors = FALSE)
)
})
}
shinyApp(ui, server)
library(shiny)
library(shiny)
library(shiny)
ui <- fluidPage(
titlePanel("investing scenarios"),
sidebarLayout(
sliderInput("integer","Initial Amount",
min = 0, max = 10000, step = 100,
pre = "$", sep = ",", value = 1000),
sliderInput("integer","Annual Contribution",
min = 0, max = 5000, step = 100,
pre = "$", sep = ",", value = 200),
sliderInput("decimal","Annual Growth Rate(in %)",
min = 0, max = 20, step = 0.1,
value = 2),
sliderInput("decimal","High Yield annual rate(in %)",
min = 0, max = 20, step = 0.1,
value = 2),
sliderInput("decimal","Fixed Income annual rate(in %)",
min = 0, max = 20, step = 0.1,
value = 5),
sliderInput("decimal","US Equality annual rate(in %)",
min = 0, max = 20, step = 0.1,
value = 10),
sliderInput("decimal","High Yield volatility(in %)",
min = 0, max = 20, step = 0.1,
value = 0.1),
sliderInput("decimal","Fixed Income volatility(in %)",
min = 0, max = 20, step = 0.1,
value = 4.5),
sliderInput("decimal","US Equality volatility(in %)",
min = 0, max = 20, step = 0.1,
value = 15),
sliderInput("integer","Year",
min = 0, max = 50, step = 1,
value = 20),
numericInput("integer","Random seed",value = 12345),
selectInput("Facet?",
choices = c("Yes","No"),selected = "Yes")),
mainPanel(tableOutput("values"))
)
server <- function(input,output){
sliderValues <- reactive({
data.frame(
Name = c("Initial Amount",
"Annual Contribution",
"Annual Growth Rate(in %)",
"High Yield annual rate(in %)",
"Fixed Income annual rate(in %)",
"US Equality annual rate(in %)",
"High Yield volatility(in %)",
"Fixed Income volatility(in %)",
"US Equality volatility(in %)",
"Year",
"Random seed",
"Facet?"),
Value = as.character(c(input$`Initial Amount`,
input$`Annual Contribution`,
input$`Annual Growth Rate(in %)`,
input$`High Yield annual rate(in %)`,
input$`Fixed Income annual rate(in %)`,
input$`US Equality annual rate(in %)`,
input$`High Yield volatility(in %`,
input$`Fixed Income volatility(in %)`,
input$`US Equality volatility(in %)`,
input$`Year`,
input$`Random seed`,
input$`Facet?`),
stringsAsFactors = FALSE)
)
})
}
shinyApp(ui, server)
?column
library(ggplot2)
a <- c(1,2,3,4)
t(a)
a
t(t(a))
a <- t(t(a))
a[,2] <- (2,4,6,8)
a[,2] <- c(2,4,6,8)
rbind(a,c(2,4,6,8))
cbind(a,c(2,4,6,8))
cbind(a,1)
data,frame
data.frame(a)
data.frame(a,"c")
data.frame(a,c="c")
a[,1]
?facet_wrap
runApp('app1')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
library(shiny); runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
faithful
?line
# Don't delete this chunk if you are using the DataComputing package
library(DataComputing)
includeSourceDocuments()
data <- c(14 , 16 , 8 , 133 , 180 , 93, 12 , 14 , 12 , 241 , 285 , 139 , 11 , 6 , 8, 259 , 265 , 221)
data.matrix <- matrix(data, nrow = 6, ncol = 3, byrow = TRUE)
data.matrix
chisq.test(data.matrix, correct = FALSE)$expected
chisq.test(data.matrix, correct = FALSE)
austen <- c()        # initialize an empty vector
for(i in 1:6){
austen[i] = sum(data.matrix[i, ])
}
imitator <- c(2, 81, 1, 153, 17, 204)
matrix <- matrix(c(austen, imitator), nrow = 6, ncol = 2, byrow = FALSE)
chisq.test(matrix, correct = FALSE)
austen <- c()        # initialize an empty vector
for(i in 1:6){
austen[i] = sum(data.matrix[i, ])
}
imitator <- c(2, 81, 1, 153, 17, 204)
matrix <- matrix(c(austen, imitator), nrow = 6, ncol = 2, byrow = FALSE)
chisq.test(matrix, correct = FALSE)
b <- matrix(c(79,58,49,10,8,9,10,34,42),nrow=3,ncol=3,byrow = TRUE)
b
chisq.test(b)$expect
chisq.test(b)
c <-  c(183,113,88,216)
c
chisq.test(c,p=c(2/6,1/6,1/6,2/6))$expect
chisq.test(c,p=c(2/6,1/6,1/6,2/6))
a <- c(0.5,0.5,0,0,0,0,0.5,0.5,0,0.5,0,0,0,0,0,0.5)
a <- matrix(a,row=4,col=4,byrow=TRUE)
a <- matrix(a,nrow=4,ncol=4,byrow=TRUE)
a
b <- diag(1,4)
b
c <- c(1,1,1,1)
c
solve(b-a)
solve(b-a)%*%c
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
library(datasets)
mtcars
runApp('E:/学习/伯克利/computing data/homework/workout2/app1.R')
